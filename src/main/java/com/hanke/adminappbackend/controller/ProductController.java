package com.hanke.adminappbackend.controller;


import com.hanke.adminappbackend.pojo.Product;
import com.hanke.adminappbackend.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/product")
public class ProductController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepository productRepository;

    @PostMapping(path = "/add")
    public @ResponseBody String addProduct(@RequestBody Product product) {
        productRepository.save(product);
        return "success";
    }

    @PostMapping(path = "/delete/{id}")
    public @ResponseBody String deleteProduct(@PathVariable Integer id) {
        productRepository.deleteById(id);
        return "delete success";
    }

    @GetMapping(path = "/list")
    public @ResponseBody List<Product> list(@RequestParam(required = false) String title){
        List<Product> list = new ArrayList<>();
        Iterable<Product> all = null;

        if (title == null || title.isEmpty()){
            all = productRepository.findAll();
        } else {
            all = productRepository.findByTitle(title);
        }

        all.forEach(list::add);
        return list;
    }


    @GetMapping(path = "/page")
    public @ResponseBody Page<Product> page(@RequestParam(required = false) String title,
                                            @RequestParam(required = false, defaultValue = "1") Integer pageNumber,
                                            @RequestParam(required = false, defaultValue = "2") Integer pageSize){
        PageRequest pageRequest = PageRequest.of(pageNumber-1, pageSize);
        Page<Product> all = null;
        if (title == null || title.isEmpty()){
            all = productRepository.findAll(pageRequest);
        } else {
            all = productRepository.findPageByTitleLike("%"+title+"%",pageRequest);
        }
        return all;
    }



}
